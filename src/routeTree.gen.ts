/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

import { Route as rootRouteImport } from "./routes/__root"
import { Route as LoginRouteRouteImport } from "./routes/login/route"
import { Route as AuthRouteRouteImport } from "./routes/_auth/route"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as LoginIndexRouteImport } from "./routes/login/index"
import { Route as LoginGetTokenRouteImport } from "./routes/login/getToken"
import { Route as AuthListEditRouteImport } from "./routes/_auth/list/$edit"
import { Route as AuthAntennaEditRouteImport } from "./routes/_auth/antenna/$edit"

const AuthListIndexLazyRouteImport = createFileRoute("/_auth/list/")()
const AuthAntennaIndexLazyRouteImport = createFileRoute("/_auth/antenna/")()

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route))
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginGetTokenRoute = LoginGetTokenRouteImport.update({
  id: "/getToken",
  path: "/getToken",
  getParentRoute: () => LoginRouteRoute,
} as any).lazy(() =>
  import("./routes/login/getToken.lazy").then((d) => d.Route),
)
const AuthListIndexLazyRoute = AuthListIndexLazyRouteImport.update({
  id: "/list/",
  path: "/list/",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/list/index.lazy").then((d) => d.Route),
)
const AuthAntennaIndexLazyRoute = AuthAntennaIndexLazyRouteImport.update({
  id: "/antenna/",
  path: "/antenna/",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/antenna/index.lazy").then((d) => d.Route),
)
const AuthListEditRoute = AuthListEditRouteImport.update({
  id: "/list/$edit",
  path: "/list/$edit",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/list/$edit.lazy").then((d) => d.Route),
)
const AuthAntennaEditRoute = AuthAntennaEditRouteImport.update({
  id: "/antenna/$edit",
  path: "/antenna/$edit",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/antenna/$edit.lazy").then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/login": typeof LoginRouteRouteWithChildren
  "/login/getToken": typeof LoginGetTokenRoute
  "/login/": typeof LoginIndexRoute
  "/antenna/$edit": typeof AuthAntennaEditRoute
  "/list/$edit": typeof AuthListEditRoute
  "/antenna": typeof AuthAntennaIndexLazyRoute
  "/list": typeof AuthListIndexLazyRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/login/getToken": typeof LoginGetTokenRoute
  "/login": typeof LoginIndexRoute
  "/antenna/$edit": typeof AuthAntennaEditRoute
  "/list/$edit": typeof AuthListEditRoute
  "/antenna": typeof AuthAntennaIndexLazyRoute
  "/list": typeof AuthListIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/_auth": typeof AuthRouteRouteWithChildren
  "/login": typeof LoginRouteRouteWithChildren
  "/login/getToken": typeof LoginGetTokenRoute
  "/login/": typeof LoginIndexRoute
  "/_auth/antenna/$edit": typeof AuthAntennaEditRoute
  "/_auth/list/$edit": typeof AuthListEditRoute
  "/_auth/antenna/": typeof AuthAntennaIndexLazyRoute
  "/_auth/list/": typeof AuthListIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/login"
    | "/login/getToken"
    | "/login/"
    | "/antenna/$edit"
    | "/list/$edit"
    | "/antenna"
    | "/list"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/login/getToken"
    | "/login"
    | "/antenna/$edit"
    | "/list/$edit"
    | "/antenna"
    | "/list"
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/login"
    | "/login/getToken"
    | "/login/"
    | "/_auth/antenna/$edit"
    | "/_auth/list/$edit"
    | "/_auth/antenna/"
    | "/_auth/list/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_auth": {
      id: "/_auth"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/login/": {
      id: "/login/"
      path: "/"
      fullPath: "/login/"
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    "/login/getToken": {
      id: "/login/getToken"
      path: "/getToken"
      fullPath: "/login/getToken"
      preLoaderRoute: typeof LoginGetTokenRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    "/_auth/list/": {
      id: "/_auth/list/"
      path: "/list"
      fullPath: "/list"
      preLoaderRoute: typeof AuthListIndexLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    "/_auth/antenna/": {
      id: "/_auth/antenna/"
      path: "/antenna"
      fullPath: "/antenna"
      preLoaderRoute: typeof AuthAntennaIndexLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    "/_auth/list/$edit": {
      id: "/_auth/list/$edit"
      path: "/list/$edit"
      fullPath: "/list/$edit"
      preLoaderRoute: typeof AuthListEditRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    "/_auth/antenna/$edit": {
      id: "/_auth/antenna/$edit"
      path: "/antenna/$edit"
      fullPath: "/antenna/$edit"
      preLoaderRoute: typeof AuthAntennaEditRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthAntennaEditRoute: typeof AuthAntennaEditRoute
  AuthListEditRoute: typeof AuthListEditRoute
  AuthAntennaIndexLazyRoute: typeof AuthAntennaIndexLazyRoute
  AuthListIndexLazyRoute: typeof AuthListIndexLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAntennaEditRoute: AuthAntennaEditRoute,
  AuthListEditRoute: AuthListEditRoute,
  AuthAntennaIndexLazyRoute: AuthAntennaIndexLazyRoute,
  AuthListIndexLazyRoute: AuthListIndexLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface LoginRouteRouteChildren {
  LoginGetTokenRoute: typeof LoginGetTokenRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginGetTokenRoute: LoginGetTokenRoute,
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
