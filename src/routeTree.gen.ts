/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as LoginRouteImport } from "./routes/login/route"
import { Route as AuthRouteImport } from "./routes/_auth/route"
import { Route as IndexImport } from "./routes/index"
import { Route as LoginIndexImport } from "./routes/login/index"
import { Route as LoginGetTokenImport } from "./routes/login/getToken"
import { Route as AuthListEditImport } from "./routes/_auth/list/$edit"
import { Route as AuthAntennaEditImport } from "./routes/_auth/antenna/$edit"

// Create Virtual Routes

const AuthListIndexLazyImport = createFileRoute("/_auth/list/")()
const AuthAntennaIndexLazyImport = createFileRoute("/_auth/antenna/")()

// Create/Update Routes

const LoginRouteRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route))

const LoginIndexRoute = LoginIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LoginRouteRoute,
} as any)

const LoginGetTokenRoute = LoginGetTokenImport.update({
  id: "/getToken",
  path: "/getToken",
  getParentRoute: () => LoginRouteRoute,
} as any).lazy(() =>
  import("./routes/login/getToken.lazy").then((d) => d.Route),
)

const AuthListIndexLazyRoute = AuthListIndexLazyImport.update({
  id: "/list/",
  path: "/list/",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/list/index.lazy").then((d) => d.Route),
)

const AuthAntennaIndexLazyRoute = AuthAntennaIndexLazyImport.update({
  id: "/antenna/",
  path: "/antenna/",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/antenna/index.lazy").then((d) => d.Route),
)

const AuthListEditRoute = AuthListEditImport.update({
  id: "/list/$edit",
  path: "/list/$edit",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/list/$edit.lazy").then((d) => d.Route),
)

const AuthAntennaEditRoute = AuthAntennaEditImport.update({
  id: "/antenna/$edit",
  path: "/antenna/$edit",
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import("./routes/_auth/antenna/$edit.lazy").then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/_auth": {
      id: "/_auth"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    "/login/getToken": {
      id: "/login/getToken"
      path: "/getToken"
      fullPath: "/login/getToken"
      preLoaderRoute: typeof LoginGetTokenImport
      parentRoute: typeof LoginRouteImport
    }
    "/login/": {
      id: "/login/"
      path: "/"
      fullPath: "/login/"
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof LoginRouteImport
    }
    "/_auth/antenna/$edit": {
      id: "/_auth/antenna/$edit"
      path: "/antenna/$edit"
      fullPath: "/antenna/$edit"
      preLoaderRoute: typeof AuthAntennaEditImport
      parentRoute: typeof AuthRouteImport
    }
    "/_auth/list/$edit": {
      id: "/_auth/list/$edit"
      path: "/list/$edit"
      fullPath: "/list/$edit"
      preLoaderRoute: typeof AuthListEditImport
      parentRoute: typeof AuthRouteImport
    }
    "/_auth/antenna/": {
      id: "/_auth/antenna/"
      path: "/antenna"
      fullPath: "/antenna"
      preLoaderRoute: typeof AuthAntennaIndexLazyImport
      parentRoute: typeof AuthRouteImport
    }
    "/_auth/list/": {
      id: "/_auth/list/"
      path: "/list"
      fullPath: "/list"
      preLoaderRoute: typeof AuthListIndexLazyImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthAntennaEditRoute: typeof AuthAntennaEditRoute
  AuthListEditRoute: typeof AuthListEditRoute
  AuthAntennaIndexLazyRoute: typeof AuthAntennaIndexLazyRoute
  AuthListIndexLazyRoute: typeof AuthListIndexLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAntennaEditRoute: AuthAntennaEditRoute,
  AuthListEditRoute: AuthListEditRoute,
  AuthAntennaIndexLazyRoute: AuthAntennaIndexLazyRoute,
  AuthListIndexLazyRoute: AuthListIndexLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface LoginRouteRouteChildren {
  LoginGetTokenRoute: typeof LoginGetTokenRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginGetTokenRoute: LoginGetTokenRoute,
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "": typeof AuthRouteRouteWithChildren
  "/login": typeof LoginRouteRouteWithChildren
  "/login/getToken": typeof LoginGetTokenRoute
  "/login/": typeof LoginIndexRoute
  "/antenna/$edit": typeof AuthAntennaEditRoute
  "/list/$edit": typeof AuthListEditRoute
  "/antenna": typeof AuthAntennaIndexLazyRoute
  "/list": typeof AuthListIndexLazyRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "": typeof AuthRouteRouteWithChildren
  "/login/getToken": typeof LoginGetTokenRoute
  "/login": typeof LoginIndexRoute
  "/antenna/$edit": typeof AuthAntennaEditRoute
  "/list/$edit": typeof AuthListEditRoute
  "/antenna": typeof AuthAntennaIndexLazyRoute
  "/list": typeof AuthListIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/_auth": typeof AuthRouteRouteWithChildren
  "/login": typeof LoginRouteRouteWithChildren
  "/login/getToken": typeof LoginGetTokenRoute
  "/login/": typeof LoginIndexRoute
  "/_auth/antenna/$edit": typeof AuthAntennaEditRoute
  "/_auth/list/$edit": typeof AuthListEditRoute
  "/_auth/antenna/": typeof AuthAntennaIndexLazyRoute
  "/_auth/list/": typeof AuthListIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | ""
    | "/login"
    | "/login/getToken"
    | "/login/"
    | "/antenna/$edit"
    | "/list/$edit"
    | "/antenna"
    | "/list"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | ""
    | "/login/getToken"
    | "/login"
    | "/antenna/$edit"
    | "/list/$edit"
    | "/antenna"
    | "/list"
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/login"
    | "/login/getToken"
    | "/login/"
    | "/_auth/antenna/$edit"
    | "/_auth/list/$edit"
    | "/_auth/antenna/"
    | "/_auth/list/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/antenna/$edit",
        "/_auth/list/$edit",
        "/_auth/antenna/",
        "/_auth/list/"
      ]
    },
    "/login": {
      "filePath": "login/route.tsx",
      "children": [
        "/login/getToken",
        "/login/"
      ]
    },
    "/login/getToken": {
      "filePath": "login/getToken.tsx",
      "parent": "/login"
    },
    "/login/": {
      "filePath": "login/index.tsx",
      "parent": "/login"
    },
    "/_auth/antenna/$edit": {
      "filePath": "_auth/antenna/$edit.tsx",
      "parent": "/_auth"
    },
    "/_auth/list/$edit": {
      "filePath": "_auth/list/$edit.tsx",
      "parent": "/_auth"
    },
    "/_auth/antenna/": {
      "filePath": "_auth/antenna/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/list/": {
      "filePath": "_auth/list/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
